@page "/"
@page "/calendar"
@using CalendarClient.Models
@using CalendarClient.Services
@inject CalendarService CalendarService

<div class="container mt-4">
    <h1>International Travel Calender</h1>

    <div class="row mt-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Travel Stats</h5>
                    <div class="list-group list-group-flush">
                        <div class="list-group-item">
                            <strong>Total Countries:</strong> @visits.Select(v => v.Country).Distinct().Count()
                        </div>
                        <div class="list-group-item">
                            <strong>Total Visits:</strong> @visits.Count
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Add New Visit</h5>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="visitDate" class="form-label">Visit Date</label>
                                <input type="date" 
                                       class="form-control" 
                                       id="visitDate" 
                                       @bind="selectedDate" 
                                       max="@DateTime.Today.ToString("yyyy-MM-dd")" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="country" class="form-label">Country</label>
                                <input type="text" 
                                       class="form-control" 
                                       id="country" 
                                       @bind="selectedCountry"
                                       @bind:event="oninput"
                                       placeholder="Enter country name" />
                            </div>
                        </div>
                    </div>
                    <button class="btn btn-primary" 
                            @onclick="LogVisit" 
                            disabled="@(string.IsNullOrWhiteSpace(selectedCountry))">
                        <i class="bi bi-plus-circle"></i> Add Visit
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
        </div>
    }

    @if (visits.Any())
    {
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Your Travel History</h5>
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Country</th>
                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var visit in visits.OrderByDescending(v => v.Date))
                            {
                                <tr>
                                    <td>@visit.Date.ToString("MMMM d, yyyy")</td>
                                    <td>@visit.Country</td>
                                    <td class="text-end">
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteVisit(visit)">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info mt-4" role="alert">
            <i class="bi bi-info-circle"></i> No visits recorded yet. Start by adding your first travel destination!
        </div>
    }
</div>

@code {
    private DateTime selectedDate = DateTime.Today;
    private string selectedCountry = "";
    private List<Visit> visits = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadVisits();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading visits: {ex.Message}";
        }
    }

    private async Task LoadVisits()
    {
        try
        {
            var loadedVisits = await CalendarService.GetVisitsAsync();
            visits = loadedVisits.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading visits: {ex.Message}";
        }
    }

    private async Task LogVisit()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(selectedCountry))
            {
                errorMessage = "Please enter a country name";
                return;
            }

            var visit = new Visit
            {
                Date = selectedDate,
                Country = selectedCountry.Trim()
            };

            await CalendarService.LogVisitAsync(visit);
            await LoadVisits();
            selectedCountry = "";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding visit: {ex.Message}";
        }
    }

    private async Task DeleteVisit(Visit visit)
    {
        try
        {
            await CalendarService.DeleteVisitAsync(visit.Id);
            await LoadVisits();
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting visit: {ex.Message}";
        }
    }
}